#include <iostream>
using namespace std;

int partition(int arr[], int si, int ei)
{
    int count = 0;
    for (int i = si + 1; i <= ei; i++)
    {
        if (arr[i] <= arr[si])
        {
            count++;
        }
    }
    int partition_index = si + count;
    swap(arr[si], arr[partition_index]);
    int pivot = arr[partition_index];
    int i = si;
    int j = ei;
    while (i < partition_index && j > partition_index)
    {
        if (arr[i] <= pivot)
        {
            i++;
        }
        else if (arr[j] >= pivot)
        {
            j--;
        }
        else
        {
            swap(arr[i], arr[j]);
            i++;
            j--;
        }
    }
    return partition_index;
}


void quick_sort(int arr[], int si, int ei)
{
    if (si >= ei)
    {
        return;
    }
    int Pindex = partition(arr, si, ei);
    quick_sort(arr, si, Pindex - 1);
    quick_sort(arr, Pindex + 1, ei);
}

void findPairWithSum(int arr[], int n, int key) {
    quick_sort(arr, 0, n-1);
    int left = 0, right = n - 1;
    int flag = 0;

    while (left < right) {
        int sum = arr[left] + arr[right];
        if (sum == key) {
            flag = 1;
            cout << arr[left] << " " << arr[right] << endl;
            break;
        } else if (sum < key) {
            left++;
        } else {
            right--;
        }
    }

    if (flag == 0) {
        cout << "No Such Elements Exist" << endl;
    }
}

int main() {
    int T;
    cin >> T;
    while (T--) {
        int n;
        cin>>n;
        int arr[n];
        for (int i = 0; i < n; i++) {
            cin>>arr[i];
        }
        int key;
        cin>>key;
        findPairWithSum(arr, n, key);
    }
}
